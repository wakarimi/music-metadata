basePath: /api/music-metadata-service
definitions:
  album_handler.readAllResponse:
    description: List of all albums
    properties:
      albums:
        items:
          $ref: '#/definitions/album_handler.readAllResponseItem'
        type: array
    type: object
  album_handler.readAllResponseItem:
    description: Album details
    properties:
      albumId:
        type: integer
      coverId:
        type: integer
      title:
        type: string
      tracksCount:
        type: integer
    type: object
  album_handler.readResponse:
    description: Response structure containing detailed information about an album
      and its tracks.
    properties:
      albumId:
        type: integer
      coverId:
        type: integer
      title:
        type: string
      trackMetadataList:
        items:
          $ref: '#/definitions/album_handler.readResponseTrack'
        type: array
      tracksCount:
        type: integer
    type: object
  album_handler.readResponseTrack:
    description: Response structure containing details about a track.
    properties:
      albumId:
        type: integer
      artistId:
        type: integer
      discNumber:
        type: integer
      genreId:
        type: integer
      title:
        type: string
      trackId:
        type: integer
      trackMetadataId:
        type: integer
      trackNumber:
        type: integer
      year:
        type: integer
    type: object
  artist_handler.readAllResponse:
    description: List of all artists
    properties:
      artists:
        items:
          $ref: '#/definitions/artist_handler.readAllResponseItem'
        type: array
    type: object
  artist_handler.readAllResponseItem:
    description: Artist details
    properties:
      artistId:
        type: integer
      mostPopularCoversIds:
        items:
          type: integer
        type: array
      name:
        type: string
      tracksCount:
        type: integer
    type: object
  artist_handler.readResponseArtist:
    description: Response structure containing detailed information about an artist
      and his tracks.
    properties:
      artistId:
        type: integer
      mostPopularCoverIds:
        items:
          type: integer
        type: array
      name:
        type: string
      trackMetadataList:
        items:
          $ref: '#/definitions/artist_handler.readResponseTrack'
        type: array
      tracksCount:
        type: integer
    type: object
  artist_handler.readResponseTrack:
    description: Response structure containing details about a track.
    properties:
      albumId:
        type: integer
      artistId:
        type: integer
      discNumber:
        type: integer
      genreId:
        type: integer
      title:
        type: string
      trackId:
        type: integer
      trackMetadataId:
        type: integer
      trackNumber:
        type: integer
      year:
        type: integer
    type: object
  genre_handler.readAllResponse:
    description: List of all genres
    properties:
      genres:
        items:
          $ref: '#/definitions/genre_handler.readAllResponseItem'
        type: array
    type: object
  genre_handler.readAllResponseItem:
    description: Genre details
    properties:
      genreId:
        type: integer
      mostPopularCoversIds:
        items:
          type: integer
        type: array
      name:
        type: string
      tracksCount:
        type: integer
    type: object
  genre_handler.readResponseGenre:
    description: Response structure containing detailed information about an genre
      and his tracks.
    properties:
      genreId:
        type: integer
      mostPopularCoverIds:
        items:
          type: integer
        type: array
      name:
        type: string
      trackMetadataList:
        items:
          $ref: '#/definitions/genre_handler.readResponseTrack'
        type: array
      tracksCount:
        type: integer
    type: object
  genre_handler.readResponseTrack:
    description: Response structure containing details about a track.
    properties:
      albumId:
        type: integer
      artistId:
        type: integer
      discNumber:
        type: integer
      genreId:
        type: integer
      title:
        type: string
      trackId:
        type: integer
      trackMetadataId:
        type: integer
      trackNumber:
        type: integer
      year:
        type: integer
    type: object
  track_metadata_handler.readAllResponse:
    properties:
      trackMetadataList:
        items:
          $ref: '#/definitions/track_metadata_handler.readAllResponseItem'
        type: array
    type: object
  track_metadata_handler.readAllResponseAlbum:
    properties:
      albumId:
        type: integer
      title:
        type: string
    type: object
  track_metadata_handler.readAllResponseArtist:
    properties:
      artistId:
        type: integer
      name:
        type: string
    type: object
  track_metadata_handler.readAllResponseGenre:
    properties:
      genreId:
        type: integer
      name:
        type: string
    type: object
  track_metadata_handler.readAllResponseItem:
    properties:
      album:
        $ref: '#/definitions/track_metadata_handler.readAllResponseAlbum'
      artist:
        $ref: '#/definitions/track_metadata_handler.readAllResponseArtist'
      discNumber:
        type: integer
      genre:
        $ref: '#/definitions/track_metadata_handler.readAllResponseGenre'
      title:
        type: string
      trackId:
        type: integer
      trackMetadataId:
        type: integer
      trackNumber:
        type: integer
      year:
        type: integer
    type: object
  types.Error:
    description: Response structure for error messages
    properties:
      error:
        type: string
    required:
    - error
    type: object
host: localhost:8023
info:
  contact:
    email: zalimannard@mail.ru
    name: Dmitry Kolesnikov (Zalimannard)
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Wakarimi Music Metadata API
  version: "0.3"
paths:
  /albums:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/album_handler.readAllResponse'
        "500":
          description: Failed to fetch all album
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get all albums
      tags:
      - Albums
  /albums/{albumId}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Album Identifier
        in: path
        name: albumId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/album_handler.readResponse'
        "400":
          description: Invalid albumId format
          schema:
            $ref: '#/definitions/types.Error'
        "500":
          description: Failed to fetch album with details
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get detailed information about an album and its tracks by album id
      tags:
      - Albums
  /artists:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/artist_handler.readAllResponse'
        "500":
          description: Failed to fetch all artists
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get all artists
      tags:
      - Artists
  /artists/{artistId}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Artist Identifier
        in: path
        name: artistId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/artist_handler.readResponseArtist'
        "400":
          description: Invalid artistId format
          schema:
            $ref: '#/definitions/types.Error'
        "500":
          description: Failed to fetch artist with details
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get detailed information about an artist and his tracks by artist id
      tags:
      - Artists
  /genres:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genre_handler.readAllResponse'
        "500":
          description: Failed to fetch all genres
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get all genres
      tags:
      - Genres
  /genres/{genreId}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Genre Identifier
        in: path
        name: genreId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genre_handler.readResponseGenre'
        "400":
          description: Invalid genreId format
          schema:
            $ref: '#/definitions/types.Error'
        "500":
          description: Failed to fetch genre with details
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get detailed information about an genre and his tracks by genre id
      tags:
      - Genres
  /track-metadata:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/track_metadata_handler.readAllResponse'
        "500":
          description: Failed to fetch all genres
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get all track metadata
      tags:
      - TrackMetadata
swagger: "2.0"
